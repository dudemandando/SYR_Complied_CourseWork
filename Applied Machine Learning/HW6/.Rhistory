#Discretize
library(klaR)
library(e1071)
startnb <- Sys.time()
model_nb1 <- naiveBayes(label~., data = naive_traindf, method="nb", laplace =1)
Sys.time() - startnb
predict_nb <- predict(model_nb1, newdata=naive_testdf)
confusionMatrix(predict_nb, testLables)
#model_nb2 <- train(label~., data = naive_traindf, method="nb",
#trControl= trainControl(method="cv", number=2),
#tuneGrid=expand.grid(fL= 1:3, usekernel = c(TRUE, FALSE), adjust = 1:3)
#)
#model_nb2
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(caret)
library(rpart)
testData <- read.csv("test.csv")
trainData <- read.csv("train.csv")
#Reducing size of dataset due to memory issues.
testData <- trainData[5000:10000,]
trainData <- trainData[1:5000,]
#Check What Classes we are looking for
unique(trainData$label)
sum(!complete.cases(trainData))
sum(!complete.cases(testData))
dfColNames <- colnames(trainData)
labels <- trainData[,1]
#Convert to Numeric
trainData_ <- mutate_all(trainData, as.numeric)
testData_ <- mutate_all(testData, as.numeric)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
#Scale/Normalize
trainData_[,-1] <-range01(trainData_[,-1])
testData_ <-range01(testData_)
hist(trainData_$label)
typeof(trainData_)
typeof(testData_)
#Create DataFrame
traindf <- data.frame(trainData_)
testdf <- data.frame(testData_)
traindf$label <- as.factor(traindf$label)
typeof(traindf)
typeof(testdf)
#Set Seed to allow reproduction
set.seed(2021)
#create model First Pass
#Capture Time taken to generate Model
startDT <- Sys.time()
dt_model <- train(label ~., data=traindf, method = "rpart")
Sys.time() - startDT
#Plot Final Model Model
library(rpart.plot)
plot(dt_model$finalModel)
print(dt_model)
print(dt_model$finalModel)
dt_predict <- predict(dt_model, newdata = testdf, na.action = na.omit, type="prob" )
head(dt_predict, 5)
dt_predict2 <- predict(dt_model, newdata = testdf, type="raw" )
head(dt_predict2,5)
ctrl <- trainControl(method ="cv", number= 10)
startDT2 <- Sys.time()
dt_modelTwo <- train(label ~., data=traindf, metric = "Accuracy",
method="rpart",
trControl=ctrl,
tuneLength = 25)
Sys.time()-startDT2
dt_modelTwo
print(dt_modelTwo$results)
rpart.plot(dt_modelTwo$finalModel)
library("ElemStatLearn")
naive_traindf <- data.frame
naive_train <- read.csv("train.csv")
naive_traindf <- naive_train[1:4000,]
naive_traindf$label <- as.factor(naive_traindf$label)
naive_traindf <- data.frame(naive_traindf)
naive_test<- read.csv("train.csv")
naive_testdf <- naive_test[4001:5000,]
testLables <- naive_test[4001:5000,1]
testLables <- as.factor(testLables)
#Discretize
library(klaR)
library(e1071)
startnb <- Sys.time()
model_nb1 <- naiveBayes(label~., data = naive_traindf, method="nb", laplace =1)
Sys.time() - startnb
predict_nb <- predict(model_nb1, newdata=naive_testdf)
confusionMatrix(predict_nb, testLables)
#model_nb2 <- train(label~., data = naive_traindf, method="nb",
#trControl= trainControl(method="cv", number=2),
#tuneGrid=expand.grid(fL= 1:3, usekernel = c(TRUE, FALSE), adjust = 1:3)
#)
#model_nb2
print(dt_model)
print(dt_model$finalModel)
plot(dt_model$finalModel)
print(dt_model)
print(dt_model$finalModel)
naive_testdf[,-1] <- range01(naive_testdf[,-1])
View(naive_testdf)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(caret)
library(rpart)
testData <- read.csv("test.csv")
trainData <- read.csv("train.csv")
#Reducing size of dataset due to memory issues.
testData <- trainData[5000:10000,]
trainData <- trainData[1:5000,]
#Check What Classes we are looking for
unique(trainData$label)
sum(!complete.cases(trainData))
sum(!complete.cases(testData))
dfColNames <- colnames(trainData)
labels <- trainData[,1]
#Convert to Numeric
trainData_ <- mutate_all(trainData, as.numeric)
testData_ <- mutate_all(testData, as.numeric)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
#Scale/Normalize
trainData_[,-1] <-range01(trainData_[,-1])
testData_ <-range01(testData_)
hist(trainData_$label)
typeof(trainData_)
typeof(testData_)
#Create DataFrame
traindf <- data.frame(trainData_)
testdf <- data.frame(testData_)
traindf$label <- as.factor(traindf$label)
typeof(traindf)
typeof(testdf)
#Set Seed to allow reproduction
set.seed(2021)
#create model First Pass
#Capture Time taken to generate Model
startDT <- Sys.time()
dt_model <- train(label ~., data=traindf, method = "rpart")
Sys.time() - startDT
#Plot Final Model Model
library(rpart.plot)
print(dt_model)
print(dt_model$finalModel)
dt_predict <- predict(dt_model, newdata = testdf, na.action = na.omit, type="prob" )
head(dt_predict, 5)
dt_predict2 <- predict(dt_model, newdata = testdf, type="raw" )
head(dt_predict2,5)
#Second Pass - Tune Length set to 25
ctrl <- trainControl(method ="cv", number= 10)
startDT2 <- Sys.time()
dt_modelTwo <- train(label ~., data=traindf, metric = "Accuracy",
method="rpart",
trControl=ctrl,
tuneLength = 25)
Sys.time()-startDT2
dt_modelTwo
print(dt_modelTwo$results)
rpart.plot(dt_modelTwo$finalModel)
library("ElemStatLearn")
naive_traindf <- data.frame
naive_train <- read.csv("train.csv")
naive_traindf <- naive_train[1:4000,]
naive_traindf$label <- as.factor(naive_traindf$label)
naive_traindf <- data.frame(naive_traindf)
naive_test<- read.csv("train.csv")
naive_testdf <- naive_test[4001:5000,]
naive_testdf[,-1] <- range01(naive_testdf[,-1])
testLables <- naive_test[4001:5000,1]
testLables <- as.factor(testLables)
library(klaR)
library(e1071)
startnb <- Sys.time()
model_nb1 <- naiveBayes(label~., data = naive_traindf, method="nb", laplace =1)
Sys.time() - startnb
predict_nb <- predict(model_nb1, newdata=naive_testdf)
confusionMatrix(predict_nb, testLables)
#model_nb2 <- train(label~., data = naive_traindf, method="nb",
#trControl= trainControl(method="cv", number=2),
#tuneGrid=expand.grid(fL= 1:3, usekernel = c(TRUE, FALSE), adjust = 1:3)
#)
#model_nb2
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(caret)
library(rpart)
testData <- read.csv("test.csv")
trainData <- read.csv("train.csv")
#Reducing size of dataset due to memory issues.
testData <- trainData[5000:10000,]
trainData <- trainData[1:5000,]
#Check What Classes we are looking for
unique(trainData$label)
sum(!complete.cases(trainData))
sum(!complete.cases(testData))
dfColNames <- colnames(trainData)
labels <- trainData[,1]
#Convert to Numeric
trainData_ <- mutate_all(trainData, as.numeric)
testData_ <- mutate_all(testData, as.numeric)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
#Scale/Normalize
trainData_[,-1] <-range01(trainData_[,-1])
testData_ <-range01(testData_)
hist(trainData_$label)
typeof(trainData_)
typeof(testData_)
#Create DataFrame
traindf <- data.frame(trainData_)
testdf <- data.frame(testData_)
traindf$label <- as.factor(traindf$label)
typeof(traindf)
typeof(testdf)
#Set Seed to allow reproduction
set.seed(2021)
#create model First Pass
#Capture Time taken to generate Model
startDT <- Sys.time()
dt_model <- train(label ~., data=traindf, method = "rpart")
Sys.time() - startDT
#Plot Final Model Model
library(rpart.plot)
print(dt_model)
print(dt_model$finalModel)
dt_predict <- predict(dt_model, newdata = testdf, na.action = na.omit, type="prob" )
head(dt_predict, 5)
dt_predict2 <- predict(dt_model, newdata = testdf, type="raw" )
head(dt_predict2,5)
#Second Pass - Tune Length set to 25
ctrl <- trainControl(method ="cv", number= 10)
startDT2 <- Sys.time()
dt_modelTwo <- train(label ~., data=traindf, metric = "Accuracy",
method="rpart",
trControl=ctrl,
tuneLength = 25)
Sys.time()-startDT2
dt_modelTwo
print(dt_modelTwo$results)
rpart.plot(dt_modelTwo$finalModel)
library("ElemStatLearn")
naive_traindf <- data.frame
naive_train <- read.csv("train.csv")
naive_traindf <- naive_train[1:4000,]
naive_traindf$label <- as.factor(naive_traindf$label)
naive_traindf <- data.frame(naive_traindf)
naive_test<- read.csv("train.csv")
naive_testdf <- naive_test[4001:5000,]
testLables <- naive_test[4001:5000,1]
testLables <- as.factor(testLables)
library(klaR)
library(e1071)
startnb <- Sys.time()
model_nb1 <- naiveBayes(label~., data = naive_traindf, method="nb", laplace =1)
Sys.time() - startnb
predict_nb <- predict(model_nb1, newdata=naive_testdf)
confusionMatrix(predict_nb, testLables)
#model_nb2 <- train(label~., data = naive_traindf, method="nb",
#trControl= trainControl(method="cv", number=2),
#tuneGrid=expand.grid(fL= 1:3, usekernel = c(TRUE, FALSE), adjust = 1:3)
#)
#model_nb2
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(caret)
library(rpart)
testData <- read.csv("test.csv")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(caret)
library(rpart)
testData <- read.csv("test.csv")
trainData <- read.csv("train.csv")
#Reducing size of dataset due to memory issues.
testData <- trainData[5000:10000,]
trainData <- trainData[1:5000,]
#Check What Classes we are looking for
unique(trainData$label)
sum(!complete.cases(trainData))
sum(!complete.cases(testData))
dfColNames <- colnames(trainData)
labels <- trainData[,1]
#Convert to Numeric
trainData_ <- mutate_all(trainData, as.numeric)
testData_ <- mutate_all(testData, as.numeric)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
#Scale/Normalize
trainData_[,-1] <-range01(trainData_[,-1])
testData_ <-range01(testData_)
hist(trainData_$label)
typeof(trainData_)
typeof(testData_)
#Create DataFrame
traindf <- data.frame(trainData_)
testdf <- data.frame(testData_)
traindf$label <- as.factor(traindf$label)
typeof(traindf)
typeof(testdf)
#Set Seed to allow reproduction
set.seed(2021)
#create model First Pass
#Capture Time taken to generate Model
startDT <- Sys.time()
dt_model <- train(label ~., data=traindf, method = "rpart")
Sys.time() - startDT
#Plot Final Model Model
library(rpart.plot)
print(dt_model)
print(dt_model$finalModel)
dt_predict <- predict(dt_model, newdata = testdf, na.action = na.omit, type="prob" )
head(dt_predict, 5)
dt_predict2 <- predict(dt_model, newdata = testdf, type="raw" )
head(dt_predict2,5)
#Second Pass - Tune Length set to 25
ctrl <- trainControl(method ="cv", number= 10)
startDT2 <- Sys.time()
dt_modelTwo <- train(label ~., data=traindf, metric = "Accuracy",
method="rpart",
trControl=ctrl,
tuneLength = 25)
Sys.time()-startDT2
dt_modelTwo
print(dt_modelTwo$results)
rpart.plot(dt_modelTwo$finalModel)
library("ElemStatLearn")
naive_traindf <- data.frame
naive_train <- read.csv("train.csv")
naive_traindf <- naive_train[1:9000,]
naive_traindf$label <- as.factor(naive_traindf$label)
naive_traindf <- data.frame(naive_traindf)
naive_test<- read.csv("train.csv")
naive_testdf <- naive_test[9001:15000,]
testLables <- naive_test[9001:15000,1]
testLables <- as.factor(testLables)
library(klaR)
library(e1071)
startnb <- Sys.time()
model_nb1 <- naiveBayes(label~., data = naive_traindf, method="nb", laplace =1)
Sys.time() - startnb
predict_nb <- predict(model_nb1, newdata=naive_testdf)
confusionMatrix(predict_nb, testLables)
#model_nb2 <- train(label~., data = naive_traindf, method="nb",
#trControl= trainControl(method="cv", number=2),
#tuneGrid=expand.grid(fL= 1:3, usekernel = c(TRUE, FALSE), adjust = 1:3)
#)
#model_nb2
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(caret)
library(rpart)
testData <- read.csv("test.csv")
trainData <- read.csv("train.csv")
#Reducing size of dataset due to memory issues.
testData <- trainData[5000:10000,]
trainData <- trainData[1:5000,]
#Check What Classes we are looking for
unique(trainData$label)
sum(!complete.cases(trainData))
sum(!complete.cases(testData))
dfColNames <- colnames(trainData)
labels <- trainData[,1]
#Convert to Numeric
trainData_ <- mutate_all(trainData, as.numeric)
testData_ <- mutate_all(testData, as.numeric)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
#Scale/Normalize
trainData_[,-1] <-range01(trainData_[,-1])
testData_ <-range01(testData_)
hist(trainData_$label)
typeof(trainData_)
typeof(testData_)
#Create DataFrame
traindf <- data.frame(trainData_)
testdf <- data.frame(testData_)
traindf$label <- as.factor(traindf$label)
typeof(traindf)
typeof(testdf)
#Set Seed to allow reproduction
set.seed(2021)
#create model First Pass
#Capture Time taken to generate Model
startDT <- Sys.time()
dt_model <- train(label ~., data=traindf, method = "rpart")
Sys.time() - startDT
#Plot Final Model Model
library(rpart.plot)
print(dt_model)
print(dt_model$finalModel)
dt_predict <- predict(dt_model, newdata = testdf, na.action = na.omit, type="prob" )
head(dt_predict, 5)
dt_predict2 <- predict(dt_model, newdata = testdf, type="raw" )
head(dt_predict2,5)
#Second Pass - Tune Length set to 25
ctrl <- trainControl(method ="cv", number= 10)
startDT2 <- Sys.time()
dt_modelTwo <- train(label ~., data=traindf, metric = "Accuracy",
method="rpart",
trControl=ctrl,
tuneLength = 25)
Sys.time()-startDT2
dt_modelTwo
print(dt_modelTwo$results)
rpart.plot(dt_modelTwo$finalModel)
library("ElemStatLearn")
naive_traindf <- data.frame
naive_train <- read.csv("train.csv")
naive_traindf <- naive_train[1:9000,]
naive_traindf$label <- as.factor(naive_traindf$label)
naive_traindf <- data.frame(naive_traindf)
naive_test<- read.csv("train.csv")
naive_testdf <- naive_test[9001:15000,]
testLables <- naive_test[9001:15000,1]
testLables <- as.factor(testLables)
library(klaR)
library(e1071)
startnb <- Sys.time()
model_nb1 <- naiveBayes(label~., data = naive_traindf, method="nb", laplace =1)
Sys.time() - startnb
predict_nb <- predict(model_nb1, newdata=naive_testdf)
confusionMatrix(predict_nb, testLables)
#model_nb2 <- train(label~., data = naive_traindf, method="nb",
#trControl= trainControl(method="cv", number=2),
#tuneGrid=expand.grid(fL= 1:3, usekernel = c(TRUE, FALSE), adjust = 1:3)
#)
#model_nb2
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(caret)
library(rpart)
testData <- read.csv("test.csv")
trainData <- read.csv("train.csv")
#Reducing size of dataset due to memory issues.
testData <- trainData[5000:10000,]
trainData <- trainData[1:5000,]
#Check What Classes we are looking for
unique(trainData$label)
sum(!complete.cases(trainData))
sum(!complete.cases(testData))
dfColNames <- colnames(trainData)
labels <- trainData[,1]
#Convert to Numeric
trainData_ <- mutate_all(trainData, as.numeric)
testData_ <- mutate_all(testData, as.numeric)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
#Scale/Normalize
trainData_[,-1] <-range01(trainData_[,-1])
testData_ <-range01(testData_)
hist(trainData_$label)
typeof(trainData_)
typeof(testData_)
#Create DataFrame
traindf <- data.frame(trainData_)
testdf <- data.frame(testData_)
traindf$label <- as.factor(traindf$label)
typeof(traindf)
typeof(testdf)
#Set Seed to allow reproduction
set.seed(2021)
#create model First Pass
#Capture Time taken to generate Model
startDT <- Sys.time()
dt_model <- train(label ~., data=traindf, method = "rpart")
Sys.time() - startDT
#Plot Final Model Model
library(rpart.plot)
print(dt_model)
print(dt_model$finalModel)
dt_predict <- predict(dt_model, newdata = testdf, na.action = na.omit, type="prob" )
head(dt_predict, 5)
dt_predict2 <- predict(dt_model, newdata = testdf, type="raw" )
head(dt_predict2,5)
#Second Pass - Tune Length set to 25
ctrl <- trainControl(method ="cv", number= 10)
startDT2 <- Sys.time()
dt_modelTwo <- train(label ~., data=traindf, metric = "Accuracy",
method="rpart",
trControl=ctrl,
tuneLength = 25)
Sys.time()-startDT2
dt_modelTwo
print(dt_modelTwo$results)
rpart.plot(dt_modelTwo$finalModel)
library("ElemStatLearn")
naive_traindf <- data.frame
naive_train <- read.csv("train.csv")
naive_traindf <- naive_train[1:9000,]
naive_traindf$label <- as.factor(naive_traindf$label)
naive_traindf <- data.frame(naive_traindf)
naive_test<- read.csv("train.csv")
naive_testdf <- naive_test[9001:15000,]
testLables <- naive_test[9001:15000,1]
testLables <- as.factor(testLables)
library(klaR)
library(e1071)
startnb <- Sys.time()
model_nb1 <- naiveBayes(label~., data = naive_traindf, method="nb", laplace =1)
Sys.time() - startnb
predict_nb <- predict(model_nb1, newdata=naive_testdf)
confusionMatrix(predict_nb, testLables)
model_nb2 <- train(label~., data = naive_traindf, method="nb",
trControl= trainControl(method="cv", number=2),
tuneGrid=expand.grid(fL= 1:3, usekernel = c(TRUE, FALSE), adjust = 1:3)
)
model_nb2
model_nb2 <- train(label~., data = naive_traindf, method="nb",
trControl= trainControl(method="cv", number=2),
tuneGrid=expand.grid(fL= 1:3, usekernel = c(TRUE, FALSE), adjust = 1:3)
)
